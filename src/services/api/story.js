import { apiRequest } from './config.js'

/**
 * Servicio para obtener historias del Ratoncito P√©rez desde el backend
 * Usa el endpoint de Q&A que funciona correctamente
 */
class StoryService {
  constructor() {
    this.baseURL = 'qa'
  }

  /**
   * Obtener una historia del Ratoncito P√©rez para un lugar espec√≠fico
   * @param {string} placeName - Nombre del lugar
   * @param {Array<number>} childrenAges - Edades de los ni√±os
   * @param {Object} coordinates - Coordenadas del lugar
   * @returns {Promise<Object>} - Historia generada
   */
  async getStory(placeName, childrenAges = [6, 8], coordinates = null) {
    try {
      console.log(`üìñ Obteniendo historia para ${placeName} con edades ${childrenAges}`)
      
      const requestData = {
        question: `Cu√©ntame una historia m√°gica sobre ${placeName}`,
        latitude: coordinates?.latitude || 40.4168,
        longitude: coordinates?.longitude || -3.7038,
        place_name: placeName,
        children_ages: childrenAges
      }

      const response = await apiRequest(`${this.baseURL}/ask`, 'POST', requestData)
      
      if (response.success) {
        console.log(`‚úÖ Historia obtenida para ${placeName}:`, response.data)
        return {
          success: true,
          data: {
            story: response.data.answer || 'Historia m√°gica del Ratoncito P√©rez',
            place_name: placeName,
            children_ages: childrenAges,
            has_real_data: response.data.has_real_data || false,
            response_source: response.data.response_source || 'ai_generated',
            coordinates: coordinates
          }
        }
      } else {
        throw new Error(response.message || 'Error obteniendo historia')
      }
    } catch (error) {
      console.error('Error obteniendo historia:', error)
      return this.getFallbackStory(placeName, childrenAges)
    }
  }

  /**
   * Obtener una curiosidad sobre un lugar
   * @param {string} placeName - Nombre del lugar
   * @param {Array<number>} childrenAges - Edades de los ni√±os
   * @param {Object} coordinates - Coordenadas del lugar
   * @returns {Promise<Object>} - Curiosidad generada
   */
  async getCuriosity(placeName, childrenAges = [6, 8], coordinates = null) {
    try {
      console.log(`üîç Obteniendo curiosidad para ${placeName}`)
      
      const requestData = {
        question: `¬øQu√© curiosidad interesante tiene ${placeName}?`,
        latitude: coordinates?.latitude || 40.4168,
        longitude: coordinates?.longitude || -3.7038,
        place_name: placeName,
        children_ages: childrenAges
      }

      const response = await apiRequest(`${this.baseURL}/ask`, 'POST', requestData)
      
      if (response.success) {
        console.log(`‚úÖ Curiosidad obtenida para ${placeName}:`, response.data)
        return {
          success: true,
          data: {
            curiosity: response.data.answer || 'Curiosidad m√°gica del lugar',
            place_name: placeName,
            children_ages: childrenAges,
            has_real_data: response.data.has_real_data || false,
            response_source: response.data.response_source || 'ai_generated'
          }
        }
      } else {
        throw new Error(response.message || 'Error obteniendo curiosidad')
      }
    } catch (error) {
      console.error('Error obteniendo curiosidad:', error)
      return this.getFallbackCuriosity(placeName, childrenAges)
    }
  }

  /**
   * Obtener un desaf√≠o para un lugar
   * @param {string} placeName - Nombre del lugar
   * @param {Array<number>} childrenAges - Edades de los ni√±os
   * @param {Object} coordinates - Coordenadas del lugar
   * @returns {Promise<Object>} - Desaf√≠o generado
   */
  async getChallenge(placeName, childrenAges = [6, 8], coordinates = null) {
    try {
      console.log(`üéØ Obteniendo desaf√≠o para ${placeName}`)
      
      const requestData = {
        question: `Crea un desaf√≠o divertido para ni√±os de ${childrenAges.join(' y ')} a√±os en ${placeName}`,
        latitude: coordinates?.latitude || 40.4168,
        longitude: coordinates?.longitude || -3.7038,
        place_name: placeName,
        children_ages: childrenAges
      }

      const response = await apiRequest(`${this.baseURL}/ask`, 'POST', requestData)
      
      if (response.success) {
        console.log(`‚úÖ Desaf√≠o obtenido para ${placeName}:`, response.data)
        return {
          success: true,
          data: {
            challenge: response.data.answer || 'Desaf√≠o m√°gico del Ratoncito P√©rez',
            place_name: placeName,
            children_ages: childrenAges,
            has_real_data: response.data.has_real_data || false,
            response_source: response.data.response_source || 'ai_generated'
          }
        }
      } else {
        throw new Error(response.message || 'Error obteniendo desaf√≠o')
      }
    } catch (error) {
      console.error('Error obteniendo desaf√≠o:', error)
      return this.getFallbackChallenge(placeName, childrenAges)
    }
  }

  /**
   * Obtener historia de fallback cuando el backend no est√° disponible
   * @param {string} placeName - Nombre del lugar
   * @param {Array<number>} childrenAges - Edades de los ni√±os
   * @returns {Object} - Historia de fallback
   */
  getFallbackStory(placeName, childrenAges = [6, 8]) {
    console.log(`üîÑ Usando historia de fallback para ${placeName}`)
    
    const fallbackStories = {
      'Plaza Mayor': '¬°Hola, familia! Soy el Ratoncito P√©rez y te voy a contar un secreto sobre Plaza Mayor. Esta plaza m√°gica ha visto pasar siglos de historia. ¬øSab√≠as que aqu√≠ se celebraban las fiestas m√°s importantes de Madrid? ¬°Y cada piedra tiene una historia que contar!',
      'Puerta del Sol': '¬°Buenos d√≠as! Soy el Ratoncito P√©rez. Puerta del Sol es el coraz√≥n de Madrid, donde todos los caminos se encuentran. Aqu√≠ est√° el kil√≥metro cero, el punto desde donde se miden todas las distancias de Espa√±a. ¬°Es un lugar lleno de magia y energ√≠a!',
      'Palacio Real': '¬°Saludos, peque√±os exploradores! Soy el Ratoncito P√©rez. El Palacio Real es la residencia oficial de los reyes de Espa√±a. ¬øSab√≠as que tiene m√°s de 3,000 habitaciones? ¬°Y cada una guarda secretos y tesoros incre√≠bles!',
      'Parque del Retiro': '¬°Hola, aventureros! Soy el Ratoncito P√©rez. El Retiro es mi parque favorito de Madrid. Aqu√≠ los √°rboles susurran historias antiguas y el estanque guarda secretos m√°gicos. ¬°Es un lugar perfecto para so√±ar y jugar!',
      'Museo del Prado': '¬°Buenos d√≠as, artistas! Soy el Ratoncito P√©rez. El Prado es como una m√°quina del tiempo llena de arte. Aqu√≠ puedes viajar a trav√©s de la historia viendo cuadros incre√≠bles. ¬°Cada pintura tiene una historia m√°gica que contar!'
    }

    const story = fallbackStories[placeName] || `¬°Hola, familia! Soy el Ratoncito P√©rez y te voy a contar una historia m√°gica sobre ${placeName}. Este lugar especial est√° lleno de secretos y aventuras esperando ser descubiertos. ¬°Vamos a explorarlo juntos!`

    return {
      success: true,
      data: {
        story: story,
        place_name: placeName,
        children_ages: childrenAges,
        has_real_data: false,
        response_source: 'fallback'
      }
    }
  }

  /**
   * Obtener curiosidad de fallback
   * @param {string} placeName - Nombre del lugar
   * @param {Array<number>} childrenAges - Edades de los ni√±os
   * @returns {Object} - Curiosidad de fallback
   */
  getFallbackCuriosity(placeName, childrenAges = [6, 8]) {
    const curiosities = {
      'Plaza Mayor': '¬øSab√≠as que Plaza Mayor tiene forma rectangular y est√° rodeada de edificios con balcones desde donde la gente observaba los espect√°culos?',
      'Puerta del Sol': '¬øSab√≠as que en Puerta del Sol est√° el reloj que marca las campanadas de fin de a√±o para toda Espa√±a?',
      'Palacio Real': '¬øSab√≠as que el Palacio Real tiene una colecci√≥n de violines Stradivarius, los instrumentos m√°s valiosos del mundo?',
      'Parque del Retiro': '¬øSab√≠as que el Retiro tiene un √°rbol que tiene m√°s de 400 a√±os y es uno de los m√°s antiguos de Madrid?',
      'Museo del Prado': '¬øSab√≠as que el Prado tiene m√°s de 8,000 cuadros, pero solo se pueden ver unos 1,300 a la vez?'
    }

    const curiosity = curiosities[placeName] || `¬øSab√≠as que ${placeName} tiene secretos m√°gicos esperando ser descubiertos?`

    return {
      success: true,
      data: {
        curiosity: curiosity,
        place_name: placeName,
        children_ages: childrenAges,
        has_real_data: false,
        response_source: 'fallback'
      }
    }
  }

  /**
   * Obtener desaf√≠o de fallback
   * @param {string} placeName - Nombre del lugar
   * @param {Array<number>} childrenAges - Edades de los ni√±os
   * @returns {Object} - Desaf√≠o de fallback
   */
  getFallbackChallenge(placeName, childrenAges = [6, 8]) {
    const challenges = {
      'Plaza Mayor': 'Busca la estatua de Felipe III y cuenta cu√°ntos dientes tiene el caballo. ¬°Es un secreto que solo los m√°s observadores pueden descubrir!',
      'Puerta del Sol': 'Encuentra el kil√≥metro cero y salta sobre √©l tres veces. ¬°Cada salto te dar√° un deseo m√°gico!',
      'Palacio Real': 'Busca el escudo de armas en la fachada y cuenta cu√°ntos elementos diferentes puedes identificar.',
      'Parque del Retiro': 'Encuentra el Palacio de Cristal y busca tu reflejo m√°gico en el agua.',
      'Museo del Prado': 'Busca un cuadro con un gato y cu√©ntame qu√© est√° haciendo ese gato m√°gico.'
    }

    const challenge = challenges[placeName] || `Explora ${placeName} y encuentra algo m√°gico que nadie m√°s haya notado. ¬°Tu misi√≥n es descubrir el secreto m√°s especial del lugar!`

    return {
      success: true,
      data: {
        challenge: challenge,
        place_name: placeName,
        children_ages: childrenAges,
        has_real_data: false,
        response_source: 'fallback'
      }
    }
  }
}

export const storyService = new StoryService()
