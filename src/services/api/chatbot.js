import { apiRequest } from './config.js'

class RatoncitoChatbot {
  constructor() {
    this.apiBase = 'adventure'
    this.currentPlace = 'Plaza Mayor'
    this.childrenAges = [6, 8]
    this.conversationHistory = []
  }

  /**
   * Env√≠a un mensaje al chatbot del Ratoncito P√©rez
   * @param {string} message - Mensaje del usuario
   * @param {string} placeName - Nombre del lugar actual
   * @param {Array} childrenAges - Edades de los ni√±os
   * @returns {Promise<Object>} Respuesta del chatbot
   */
  async sendMessage(message, placeName = null, childrenAges = null) {
    try {
      console.log(`üê≠ Enviando mensaje al Ratoncito: ${message}`)
      
      const requestData = {
        message: message,
        place_name: placeName || this.currentPlace,
        children_ages: childrenAges || this.childrenAges,
        conversation_history: this.conversationHistory
      }

      const response = await apiRequest(`${this.apiBase}/chatbot`, 'POST', requestData)
      
      if (response.success && response.data.status === 'success') {
        const botResponse = {
          id: Date.now(),
          type: 'bot',
          message: response.data.response || '¬°Hola! Soy el Ratoncito P√©rez. ¬øEn qu√© puedo ayudarte?',
          story: response.data.story || '',
          curiosity: response.data.curiosity || '',
          place_name: response.data.place_name || this.currentPlace,
          timestamp: new Date().toLocaleTimeString('es-ES', { 
            hour: '2-digit', 
            minute: '2-digit' 
          })
        }

        // Actualizar historial de conversaci√≥n
        this.conversationHistory.push(
          { role: 'user', content: message },
          { role: 'bot', content: response.data.response }
        )

        // Limitar historial a 10 mensajes para no sobrecargar
        if (this.conversationHistory.length > 10) {
          this.conversationHistory = this.conversationHistory.slice(-10)
        }
        
        console.log(`‚úÖ Respuesta del Ratoncito:`, botResponse)
        return {
          success: true,
          data: botResponse
        }
      } else {
        throw new Error(response.message || 'Error obteniendo respuesta del Ratoncito')
      }
    } catch (error) {
      console.error('Error enviando mensaje al Ratoncito:', error)
      return this.getFallbackResponse(message)
    }
  }

  /**
   * Obtiene ejemplos de mensajes del backend
   * @returns {Promise<Array>} Lista de ejemplos
   */
  async getExamples() {
    try {
      console.log('üìù Obteniendo ejemplos de mensajes')
      
      const response = await apiRequest(`${this.apiBase}/chatbot/examples`, 'GET')
      
      if (response.success) {
        return {
          success: true,
          data: response.data.examples || []
        }
      } else {
        throw new Error(response.message || 'Error obteniendo ejemplos')
      }
    } catch (error) {
      console.error('Error obteniendo ejemplos:', error)
      return {
        success: true,
        data: this.getFallbackExamples()
      }
    }
  }

  /**
   * Respuesta de fallback cuando el backend no est√° disponible
   */
  getFallbackResponse(message) {
    const fallbackResponses = [
      "¬°Hola! Soy el Ratoncito P√©rez. ¬øEn qu√© puedo ayudarte en tu aventura por Madrid?",
      "¬°Qu√© pregunta tan interesante! D√©jame pensar en una historia m√°gica...",
      "¬°Excelente pregunta! Como Ratoncito P√©rez, te puedo contar muchas cosas m√°gicas sobre este lugar.",
      "¬°Hola! Estoy aqu√≠ para ayudarte con tu aventura en Madrid. ¬øQu√© te gustar√≠a saber?",
      "¬°Qu√© divertido! Me encanta cuando los ni√±os hacen preguntas. Te voy a contar algo especial..."
    ]

    const randomResponse = fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)]
    
    const botResponse = {
      id: Date.now(),
      type: 'bot',
      message: randomResponse,
      story: '',
      curiosity: '',
      place_name: this.currentPlace,
      timestamp: new Date().toLocaleTimeString('es-ES', { 
        hour: '2-digit', 
        minute: '2-digit' 
      })
    }

    // A√±adir al historial
    this.conversationHistory.push(
      { role: 'user', content: message },
      { role: 'bot', content: randomResponse }
    )
    
    return {
      success: true,
      data: botResponse
    }
  }

  /**
   * Ejemplos de fallback
   */
  getFallbackExamples() {
    return [
      "Cu√©ntame una historia sobre este lugar",
      "¬øQu√© secretos esconde este sitio?",
      "¬øC√≥mo llegaste aqu√≠, Ratoncito?",
      "¬øQu√© puedo hacer en este lugar?",
      "¬øTienes alguna aventura para m√≠?"
    ]
  }

  /**
   * Actualiza el lugar actual
   */
  setCurrentPlace(placeName) {
    this.currentPlace = placeName
  }

  /**
   * Actualiza las edades de los ni√±os
   */
  setChildrenAges(ages) {
    this.childrenAges = ages
  }

  /**
   * Obtiene el historial de conversaci√≥n
   */
  getConversationHistory() {
    return this.conversationHistory
  }

  /**
   * Limpia el historial de conversaci√≥n
   */
  clearHistory() {
    this.conversationHistory = []
  }

  /**
   * A√±ade un mensaje del usuario al historial
   */
  addUserMessage(message) {
    const userMessage = {
      id: Date.now(),
      type: 'user',
      message: message,
      timestamp: new Date().toLocaleTimeString('es-ES', { 
        hour: '2-digit', 
        minute: '2-digit' 
      })
    }
    
    return userMessage
  }
}

// Crear instancia y exportar por defecto
const ratoncitoChatbot = new RatoncitoChatbot()
export default ratoncitoChatbot